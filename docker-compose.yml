# Use postgres/example user/password credentials
version: '3.8'

services:
  song-service:
    build:
      context: ../
      dockerfile: song-service/Dockerfile
    hostname: song-service
    container_name: song-service
    image: song-service
    restart: on-failure
    environment:
      POSTGRES_DB: introduction_to_microservices
      POSTGRES_HOST: database
    ports:
      - "8081:8081"
    expose:
      - 8081
    links:
      - database
    depends_on:
      database:
        condition: service_healthy
    networks:
      - microservices_network

  resource-service:
    build:
      context: ../
      dockerfile: resource-service/Dockerfile
    hostname: resource-service
    container_name: resource-service
    image: resource-service
    restart: on-failure
    environment:
      POSTGRES_DB: introduction_to_microservices
      POSTGRES_HOST: database
      SONG-SERVICE_HOST: song-service
      SONG-SERVICE_PORT: 8081
    ports:
      - "8082:8082"
    expose:
      - 8081
    links:
      - database
    depends_on:
      database:
        condition: service_healthy
    networks:
      - microservices_network

  database:
    restart: on-failure
    image: postgres:latest
    container_name: database
    hostname: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: introduction_to_microservices
    volumes:
      - .:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    expose:
      - 5432
    networks:
      - microservices_network
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 2s
      timeout: 3s
      retries: 10

  awsstack:
    hostname: awsstack
    image: localstack/localstack:latest
    expose:
      - 4566
    ports:
      - "4567:4566"
    environment:
      - SERVICES=s3:4566
      - DEFAULT_REGION=us-east-1
      - LOCALSTACK_HOST=localhost
      - USE_SSL=false
      - DATA_DIR=/localstack/data
      - DEBUG=1
    volumes:
      - ./.aws/init_s3.sh:/etc/localstack/init/ready.d/init_s3.sh
    networks:
      - microservices_network

networks:
  microservices_network:
    driver: bridge
    attachable: true